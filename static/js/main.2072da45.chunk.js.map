{"version":3,"sources":["Components/TodoForm.js","Components/Todo.js","Components/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["TodoForm","props","useState","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","value","className","onSubmit","preventDefault","id","Math","floor","random","text","edit","type","name","ref","onChange","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","onClick","TodoList","setTodos","console","log","test","prevState","updatedTodos","todoId","idRemove","findIndex","data","splice","newValue","prev","item","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2072da45.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\n\r\nfunction TodoForm(props) {\r\n  const [input, setInput] = useState(\"\");\r\n\r\n  const inputRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    inputRef.current.focus();\r\n  });\r\n\r\n  const handleChange = (e) => {\r\n    setInput(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    props.onSubmit({\r\n      id: Math.floor(Math.random() * 1000),\r\n      text: input,\r\n    });\r\n\r\n    setInput(\"\");\r\n  };\r\n\r\n  return (\r\n    <form className=\"todo-form\" onSubmit={handleSubmit}>\r\n      {props.edit ? \r\n        <>\r\n          <input\r\n            type=\"text\"\r\n            name=\"text\"\r\n            className=\"todo-input edit\"\r\n            ref={inputRef}\r\n            value={input}\r\n            onChange={handleChange}\r\n          />\r\n          <button className=\"todo-button edit\">Update</button>\r\n        </>\r\n       : (\r\n        <>\r\n          <input\r\n            type=\"text\"\r\n            name=\"text\"\r\n            className=\"todo-input\"\r\n            ref={inputRef}\r\n            value={input}\r\n            onChange={handleChange}\r\n          />\r\n          <button className=\"todo-button\">Add Todo</button>\r\n        </>\r\n      )}\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default TodoForm;\r\n","import React, { useState } from \"react\";\r\nimport { RiCloseCircleLine } from \"react-icons/ri\";\r\nimport { TiEdit } from \"react-icons/ti\";\r\nimport TodoForm from \"./TodoForm\";\r\n\r\nfunction Todo({ todos, completeTodo, removeTodo, updateTodo }) {\r\n  const [edit, setEdit] = useState({\r\n    id: null,\r\n    value: \"\",\r\n  });\r\n\r\n  const submitUpdate = (value) => {\r\n    updateTodo(edit.id, value);\r\n\r\n    setEdit({\r\n      id: null,\r\n      value: \"\",\r\n    });\r\n  };\r\n\r\n  if (edit.id) {\r\n    return <TodoForm edit={edit} onSubmit={submitUpdate} />;\r\n  }\r\n\r\n  return todos.map((todo, index) => (\r\n    <div\r\n      className={todo.isComplete ? \"todo-row complete\" : \"todo-row\"}\r\n      key={index}\r\n    >\r\n      <div key={todo.id} onClick={() => completeTodo(todo.id)}>\r\n\r\n        {todo.text}\r\n      </div>\r\n      <div className=\"icons\">\r\n        <RiCloseCircleLine\r\n          onClick={() => {\r\n            removeTodo(todo.id);\r\n          }}\r\n          className=\"delete-icon\"\r\n        ></RiCloseCircleLine>\r\n        <TiEdit\r\n          onClick={() => setEdit({ id: todo.id, value: todo.text })}\r\n          className=\"edit-icon\"\r\n        />\r\n      </div>\r\n    </div>\r\n  ));\r\n}\r\n\r\nexport default Todo;\r\n","import React,{ useState} from 'react'\r\nimport Todo from './Todo'\r\nimport TodoForm from './TodoForm'\r\n\r\nfunction TodoList() {\r\n    const [todos, setTodos] = useState([])\r\n    const addTodo = todo =>{\r\n        if(!todo.text || /^\\s*$/.test(todo.text)){\r\n            return \r\n        }\r\n        setTodos(prevState => [...prevState, todo] );\r\n        console.log(todo)\r\n        console.log(todos);\r\n        // console.log(...todos);\r\n    }\r\n\r\n    const updateTodo = (todoId, newValue) =>{\r\n        if(!newValue.text || /^\\s*$/.test(newValue.text)){\r\n            return;\r\n        }\r\n\r\n        setTodos(prev => prev.map(item => (item.id === todoId) ? newValue : item));\r\n    }\r\n\r\n\r\n    const removeTodo  = (todoId) =>{\r\n        console.log(todoId)\r\n        const idRemove = todos.findIndex((todo) => todoId === todo.id);\r\n        const data = [...todos];\r\n        data.splice(idRemove, 1)            \r\n        setTodos(data);\r\n    }\r\n\r\n    \r\n\r\n\r\n    const completeTodo = id =>{\r\n        let updatedTodos = todos.map(todo =>{\r\n            if(todo.id === id) {\r\n                todo.isComplete = !todo.isComplete \r\n                console.log('asdf')\r\n            }\r\n            return todo;\r\n        })\r\n        setTodos(updatedTodos);\r\n    }\r\n\r\n    console.log(todos)\r\n    return (\r\n        <div>\r\n            <h1>What's the plan for today?</h1>\r\n            <TodoForm onSubmit={addTodo} />\r\n            <Todo todos={todos}  completeTodo={completeTodo} removeTodo={removeTodo} updateTodo={updateTodo}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList\r\n","\nimport './App.css';\nimport TodoList from './Components/TodoList';\n\nfunction App() {\n\n  return (\n    <div className=\"todo-app\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}